// Registro de Comidas - Dashboard Paciente
class RegistroComidasPaciente {
    constructor() {
        this.registros = [];
        this.todosLosRegistros = []; // Almacenar todos los registros para filtrado
        this.tiposComida = ['desayuno', 'almuerzo', 'merienda', 'cena', 'colacion', 'otro'];
        this.filtros = {
            periodo: 'semana',
            tipoComida: '',
            fechaInicio: '',
            fechaFin: '',
            busqueda: ''
        };
        this.paginacion = {
            paginaActual: 1,
            registrosPorPagina: 10,
            totalRegistros: 0,
            totalPaginas: 0
        };
        this.profesionalTimezone = 'UTC'; // Almacenar zona horaria del profesional
        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.cargarTimezoneProfesional();
        this.cargarRegistros();
        this.configurarFechaActual();
    }

    setupEventListeners() {
        // Botón para agregar nuevo registro
        document.getElementById('nuevoRegistroBtn')?.addEventListener('click', () => {
            this.mostrarFormularioRegistro();
        });

    }

    async cargarTimezoneProfesional() {
        try {
            const response = await fetch('/api/usuarios/mi-profesional', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                this.profesionalTimezone = data.data?.timezone || 'UTC';
                console.log('🕐 Zona horaria del profesional cargada:', this.profesionalTimezone);
            }
        } catch (error) {
            console.warn('Error cargando zona horaria del profesional:', error);
            this.profesionalTimezone = 'UTC';
        }
    }

    configurarFechaActual() {
        const hoy = this.getTodayInTimezone(this.profesionalTimezone);
        const fechaInput = document.getElementById('fechaRegistro');
        if (fechaInput) {
            fechaInput.value = hoy;
        }
    }

    getTodayInTimezone(timezone) {
        try {
            // Si no hay timezone o es UTC, usar fecha local
            if (!timezone || timezone === 'UTC') {
                return new Date().toISOString().split('T')[0];
            }
            
            // Crear fecha actual
            const now = new Date();
            
            // Convertir a la zona horaria especificada usando toLocaleString
            const dateInTimezone = new Date(now.toLocaleString("en-US", {timeZone: timezone}));
            
            // Formatear como YYYY-MM-DD
            const year = dateInTimezone.getFullYear();
            const month = String(dateInTimezone.getMonth() + 1).padStart(2, '0');
            const day = String(dateInTimezone.getDate()).padStart(2, '0');
            
            const result = `${year}-${month}-${day}`;
            console.log('📅 Fecha calculada en timezone:', result);
            
            return result;
        } catch (error) {
            console.warn('⚠️ Error obteniendo fecha en timezone, usando fecha local:', error);
            return new Date().toISOString().split('T')[0];
        }
    }

    async cargarRegistros(periodo = 'semana') {
        try {
            // Cargar todos los registros del mes para tener más datos para filtrar
            const params = new URLSearchParams();
            params.append('periodo', 'mes');

            const response = await fetch(`/api/registro-comidas/mis-registros?${params}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                this.todosLosRegistros = data.data.registros || [];
                this.filtros.periodo = periodo;
                await this.aplicarFiltros();
                this.actualizarEstadisticas(data.data.stats);
            } else {
                throw new Error('Error cargando registros');
            }
        } catch (error) {
            console.error('Error cargando registros:', error);
            this.mostrarError('Error cargando registros de comidas');
        }
    }

    async aplicarFiltros() {
        let registrosFiltrados = [...this.todosLosRegistros];

        // Filtro por período
        if (this.filtros.periodo !== 'todos') {
            const hoy = new Date();
            let fechaLimite;

            switch (this.filtros.periodo) {
                case 'hoy':
                    fechaLimite = new Date(hoy.getFullYear(), hoy.getMonth(), hoy.getDate());
                    break;
                case 'semana':
                    fechaLimite = new Date(hoy.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'mes':
                    fechaLimite = new Date(hoy.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;
            }

            if (fechaLimite) {
                registrosFiltrados = registrosFiltrados.filter(registro => 
                    new Date(registro.fecha) >= fechaLimite
                );
            }
        }

        // Filtro por tipo de comida
        if (this.filtros.tipoComida) {
            registrosFiltrados = registrosFiltrados.filter(registro => 
                registro.tipo === this.filtros.tipoComida
            );
        }

        // Filtro por rango de fechas
        if (this.filtros.fechaInicio) {
            registrosFiltrados = registrosFiltrados.filter(registro => 
                new Date(registro.fecha) >= new Date(this.filtros.fechaInicio)
            );
        }

        if (this.filtros.fechaFin) {
            registrosFiltrados = registrosFiltrados.filter(registro => 
                new Date(registro.fecha) <= new Date(this.filtros.fechaFin)
            );
        }

        // Filtro por búsqueda en descripción
        if (this.filtros.busqueda) {
            const busqueda = this.filtros.busqueda.toLowerCase();
            registrosFiltrados = registrosFiltrados.filter(registro => 
                registro.descripcion && registro.descripcion.toLowerCase().includes(busqueda)
            );
        }

        this.registros = registrosFiltrados;
        this.calcularPaginacion();
        await this.mostrarRegistros();
    }

    calcularPaginacion() {
        this.paginacion.totalRegistros = this.registros.length;
        this.paginacion.totalPaginas = Math.ceil(this.paginacion.totalRegistros / this.paginacion.registrosPorPagina);
        
        // Asegurar que la página actual sea válida
        if (this.paginacion.paginaActual > this.paginacion.totalPaginas) {
            this.paginacion.paginaActual = Math.max(1, this.paginacion.totalPaginas);
        }
    }

    obtenerRegistrosPagina() {
        const inicio = (this.paginacion.paginaActual - 1) * this.paginacion.registrosPorPagina;
        const fin = inicio + this.paginacion.registrosPorPagina;
        return this.registros.slice(inicio, fin);
    }

    async mostrarRegistros() {
        const container = document.getElementById('registrosComidasContainer');
        if (!container) return;

        // Obtener registros de la página actual
        const registrosPagina = this.obtenerRegistrosPagina();
        
        // Crear tabla con registros paginados (si hay registros)
        let registrosHTML = '';
        if (registrosPagina.length > 0) {
            const registrosOrdenados = registrosPagina.sort((a, b) => new Date(b.fecha) - new Date(a.fecha));
            const filasPromesas = registrosOrdenados.map(registro => this.crearFilaRegistro(registro));
            const filas = await Promise.all(filasPromesas);
            registrosHTML = filas.join('');
        }

        // Crear controles de paginación
        const controlesPaginacion = this.crearControlesPaginacion();

        // Crear contenido de la tabla o mensaje de no hay registros
        const contenidoTabla = registrosPagina.length > 0 ? `
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 80px;">Tipo</th>
                            <th style="width: 100px;">Fecha</th>
                            <th>Descripción</th>
                            <th style="width: 100px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${registrosHTML}
                    </tbody>
                </table>
            </div>
            ${controlesPaginacion}
        ` : `
            <div class="text-center p-4">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No se encontraron registros</h5>
                <p class="text-muted">No hay registros que coincidan con los filtros aplicados.</p>
                <div class="mt-3">
                    <button class="btn btn-outline-primary me-2" onclick="registroComidasPaciente.limpiarFiltros()">
                        <i class="fas fa-times me-1"></i>Limpiar Filtros
                    </button>
                    <button class="btn btn-primary" onclick="registroComidasPaciente.mostrarFormularioRegistro()">
                        <i class="fas fa-plus me-1"></i>Nuevo Registro
                    </button>
                </div>
            </div>
        `;

        container.innerHTML = `
            <div class="mb-3">
                <!-- Filtros principales -->
                <div class="row g-2 mb-2">
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label small text-muted mb-1">Tipo de comida</label>
                        <select class="form-select form-select-sm" id="filtroTipoComida">
                            <option value="">Todos los tipos</option>
                            ${this.tiposComida.map(tipo => `
                                <option value="${tipo}" ${this.filtros.tipoComida === tipo ? 'selected' : ''}>
                                    ${this.getNombreTipoComida(tipo)}
                                </option>
                            `).join('')}
                        </select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label small text-muted mb-1">Fecha inicio</label>
                        <input type="date" class="form-control form-control-sm" id="filtroFechaInicio" 
                               value="${this.filtros.fechaInicio}">
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label small text-muted mb-1">Fecha fin</label>
                        <input type="date" class="form-control form-control-sm" id="filtroFechaFin" 
                               value="${this.filtros.fechaFin}">
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label small text-muted mb-1">Buscar</label>
                        <input type="text" class="form-control form-control-sm" id="filtroBusqueda" 
                               placeholder="En descripción..." value="${this.filtros.busqueda}">
                    </div>
                </div>
                
                <!-- Controles -->
                <div class="row align-items-center">
                    <div class="col-12 col-md-6 mb-2 mb-md-0">
                        <button class="btn btn-outline-primary btn-sm me-2" onclick="registroComidasPaciente.limpiarFiltros()">
                            <i class="fas fa-times me-1"></i>Limpiar
                        </button>
                        <span class="text-muted small">
                            ${registrosPagina.length} de ${this.paginacion.totalRegistros} registros
                        </span>
                    </div>
                    <div class="col-12 col-md-6 text-md-end">
                        <label class="form-label small text-muted mb-1 me-2">Mostrar:</label>
                        <select class="form-select form-select-sm d-inline-block w-auto" id="registrosPorPagina">
                            <option value="5" ${this.paginacion.registrosPorPagina === 5 ? 'selected' : ''}>5</option>
                            <option value="10" ${this.paginacion.registrosPorPagina === 10 ? 'selected' : ''}>10</option>
                            <option value="20" ${this.paginacion.registrosPorPagina === 20 ? 'selected' : ''}>20</option>
                            <option value="50" ${this.paginacion.registrosPorPagina === 50 ? 'selected' : ''}>50</option>
                        </select>
                    </div>
                </div>
            </div>

            ${contenidoTabla}
        `;

        // Configurar event listeners para los filtros
        this.configurarFiltros();
    }

    crearControlesPaginacion() {
        if (this.paginacion.totalPaginas <= 1) return '';

        const paginas = [];
        const paginaActual = this.paginacion.paginaActual;
        const totalPaginas = this.paginacion.totalPaginas;

        // Botón anterior
        const botonAnterior = paginaActual > 1 ? 
            `<button class="page-link" onclick="registroComidasPaciente.cambiarPagina(${paginaActual - 1})">
                <i class="fas fa-chevron-left"></i>
            </button>` :
            `<span class="page-link disabled"><i class="fas fa-chevron-left"></i></span>`;

        // Botón siguiente
        const botonSiguiente = paginaActual < totalPaginas ?
            `<button class="page-link" onclick="registroComidasPaciente.cambiarPagina(${paginaActual + 1})">
                <i class="fas fa-chevron-right"></i>
            </button>` :
            `<span class="page-link disabled"><i class="fas fa-chevron-right"></i></span>`;

        // Páginas numeradas
        const inicio = Math.max(1, paginaActual - 2);
        const fin = Math.min(totalPaginas, paginaActual + 2);

        for (let i = inicio; i <= fin; i++) {
            const activa = i === paginaActual ? 'active' : '';
            paginas.push(`
                <li class="page-item ${activa}">
                    <button class="page-link" onclick="registroComidasPaciente.cambiarPagina(${i})">${i}</button>
                </li>
            `);
        }

        return `
            <nav aria-label="Paginación de registros">
                <ul class="pagination pagination-sm justify-content-center">
                    <li class="page-item">${botonAnterior}</li>
                    ${paginas.join('')}
                    <li class="page-item">${botonSiguiente}</li>
                </ul>
            </nav>
        `;
    }

    cambiarPagina(pagina) {
        if (pagina >= 1 && pagina <= this.paginacion.totalPaginas) {
            this.paginacion.paginaActual = pagina;
            await this.mostrarRegistros();
        }
    }

    configurarFiltros() {
        // Filtro por tipo de comida
        document.getElementById('filtroTipoComida')?.addEventListener('change', (e) => {
            this.filtros.tipoComida = e.target.value;
            this.paginacion.paginaActual = 1;
            this.aplicarFiltros();
        });

        // Filtro por fecha inicio
        document.getElementById('filtroFechaInicio')?.addEventListener('change', (e) => {
            this.filtros.fechaInicio = e.target.value;
            this.paginacion.paginaActual = 1;
            this.aplicarFiltros();
        });

        // Filtro por fecha fin
        document.getElementById('filtroFechaFin')?.addEventListener('change', (e) => {
            this.filtros.fechaFin = e.target.value;
            this.paginacion.paginaActual = 1;
            this.aplicarFiltros();
        });

        // Filtro por búsqueda
        document.getElementById('filtroBusqueda')?.addEventListener('input', (e) => {
            this.filtros.busqueda = e.target.value;
            this.paginacion.paginaActual = 1;
            this.aplicarFiltros();
        });

        // Cambiar registros por página
        document.getElementById('registrosPorPagina')?.addEventListener('change', (e) => {
            this.paginacion.registrosPorPagina = parseInt(e.target.value);
            this.paginacion.paginaActual = 1;
            this.calcularPaginacion();
            await this.mostrarRegistros();
        });
    }

    limpiarFiltros() {
        this.filtros = {
            periodo: this.filtros.periodo, // Mantener el período actual
            tipoComida: '',
            fechaInicio: '',
            fechaFin: '',
            busqueda: ''
        };
        this.paginacion.paginaActual = 1;
        this.aplicarFiltros();
    }

    crearFilaRegistro(registro) {
        const tipoComidaNombres = {
            'desayuno': 'Desayuno',
            'almuerzo': 'Almuerzo',
            'merienda': 'Merienda',
            'cena': 'Cena',
            'colacion': 'Colación',
            'otro': 'Otro'
        };

        const tipoComida = tipoComidaNombres[registro.tipo] || registro.tipo;
        const fechaFormateada = this.formatearFecha(registro.fecha);
        
        const tipoIconos = {
            'desayuno': 'fas fa-coffee',
            'almuerzo': 'fas fa-utensils',
            'merienda': 'fas fa-cookie-bite',
            'cena': 'fas fa-moon',
            'colacion': 'fas fa-apple-alt',
            'otro': 'fas fa-utensils'
        };
        const tipoIcono = tipoIconos[registro.tipo] || 'fas fa-utensils';

        return `
            <tr>
                <td>
                    <div class="d-flex align-items-center">
                        <i class="${tipoIcono} text-primary me-2" style="font-size: 16px;"></i>
                        <span class="fw-semibold" style="font-size: 13px;">${tipoComida}</span>
                    </div>
                </td>
                <td>
                    <small class="text-muted">${fechaFormateada}</small>
                </td>
                <td>
                    <span style="font-size: 13px;">${registro.descripcion || 'Sin descripción'}</span>
                </td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary" onclick="registroComidasPaciente.editarRegistro(${registro.id})" title="Editar">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-danger" onclick="registroComidasPaciente.eliminarRegistro(${registro.id})" title="Eliminar">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    formatearFecha(fecha) {
        try {
            const fechaObj = new Date(fecha);
            if (isNaN(fechaObj.getTime())) {
                return 'Fecha inválida';
            }
            
            const formatter = new Intl.DateTimeFormat('es-ES', {
                timeZone: this.profesionalTimezone,
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
            
            return formatter.format(fechaObj);
        } catch (error) {
            console.warn('Error formateando fecha con zona horaria:', error);
            // Fallback a formato simple
            const fechaObj = new Date(fecha);
            return fechaObj.toLocaleDateString('es-ES', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }
    }

    mostrarFormularioRegistro(registroId = null) {
        const registro = registroId ? this.registros.find(r => r.id === registroId) : null;
        
        const modalHTML = `
            <div class="modal fade" id="registroModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header bg-primary text-white">
                            <h5 class="modal-title">
                                <i class="fas fa-utensils me-2"></i>${registro ? 'Editar' : 'Nuevo'} Registro de Comida
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="registroForm">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="tipoComida" class="form-label">Tipo de Comida</label>
                                        <select class="form-select" id="tipoComida" required>
                                            <option value="">Seleccionar tipo...</option>
                                            ${this.tiposComida.map(tipo => `
                                                <option value="${tipo}" ${registro && registro.tipo === tipo ? 'selected' : ''}>
                                                    ${this.getNombreTipoComida(tipo)}
                                                </option>
                                            `).join('')}
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="fechaRegistro" class="form-label">Fecha</label>
                                        <input type="date" class="form-control" id="fechaRegistro" 
                                               value="${registro ? registro.fecha : new Date().toISOString().split('T')[0]}" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="descripcionRegistro" class="form-label">Descripción</label>
                                    <textarea class="form-control" id="descripcionRegistro" rows="4" 
                                              placeholder="Describe qué comiste, cantidades, ingredientes, etc." required>${registro ? registro.descripcion : ''}</textarea>
                                </div>
                                <input type="hidden" id="registroId" value="${registro ? registro.id : ''}">
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <button type="button" class="btn btn-primary" onclick="registroComidasPaciente.guardarRegistro()">
                                <i class="fas fa-save me-1"></i>${registro ? 'Actualizar' : 'Guardar'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Remover modal anterior si existe
        const existingModal = document.getElementById('registroModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        // Agregar nuevo modal
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Mostrar modal
        const modal = new bootstrap.Modal(document.getElementById('registroModal'));
        modal.show();
    }

    async guardarRegistro() {
        try {
            const tipo = document.getElementById('tipoComida').value.trim();
            const fecha = document.getElementById('fechaRegistro').value.trim();
            const descripcion = document.getElementById('descripcionRegistro').value.trim();
            const registroId = document.getElementById('registroId').value;

            // Validaciones frontend
            if (!tipo) {
                this.mostrarAlerta('Por favor selecciona un tipo de comida', 'warning');
                return;
            }

            if (!fecha) {
                this.mostrarAlerta('Por favor selecciona una fecha', 'warning');
                return;
            }

            if (!descripcion) {
                this.mostrarAlerta('Por favor ingresa una descripción', 'warning');
                return;
            }

            if (descripcion.length < 1 || descripcion.length > 1000) {
                this.mostrarAlerta('La descripción debe tener entre 1 y 1000 caracteres', 'warning');
                return;
            }

            const registroData = {
                tipo,
                fecha,
                descripcion
            };

            console.log('📤 Enviando datos:', registroData);
            console.log('📤 URL:', registroId ? `/api/registro-comidas/registro/${registroId}` : '/api/registro-comidas/registrar');
            console.log('📤 Método:', registroId ? 'PUT' : 'POST');

            const url = registroId ? `/api/registro-comidas/registro/${registroId}` : '/api/registro-comidas/registrar';
            const method = registroId ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(registroData)
            });

            console.log('📥 Respuesta del servidor:', response.status, response.statusText);

            if (response.ok) {
                const data = await response.json();
                this.mostrarAlerta(data.message, 'success');
                
                // Cerrar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('registroModal'));
                modal.hide();
                
                // Recargar registros
                this.cargarRegistros(this.filtros.periodo);
            } else {
                const errorData = await response.json();
                console.error('❌ Error del servidor:', errorData);
                console.error('❌ Status:', response.status);
                console.error('❌ Headers:', response.headers);
                
                if (errorData.errors && errorData.errors.length > 0) {
                    const errorMessages = errorData.errors.map(err => err.msg).join(', ');
                    throw new Error(`Errores de validación: ${errorMessages}`);
                } else {
                    throw new Error(errorData.message || 'Error guardando registro');
                }
            }
        } catch (error) {
            console.error('Error guardando registro:', error);
            this.mostrarAlerta('Error guardando registro: ' + error.message, 'danger');
        }
    }

    editarRegistro(registroId) {
        this.mostrarFormularioRegistro(registroId);
    }

    async eliminarRegistro(registroId) {
        if (!confirm('¿Estás seguro de que quieres eliminar este registro?')) {
            return;
        }

        try {
            const response = await fetch(`/api/registro-comidas/registro/${registroId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (response.ok) {
                this.mostrarAlerta('Registro eliminado exitosamente', 'success');
                this.cargarRegistros(this.filtros.periodo);
            } else {
                throw new Error('Error eliminando registro');
            }
        } catch (error) {
            console.error('Error eliminando registro:', error);
            this.mostrarAlerta('Error eliminando registro: ' + error.message, 'danger');
        }
    }

    actualizarEstadisticas(stats) {
        if (!stats) return;

        document.getElementById('totalRegistros').textContent = stats.total_registros || 0;
        document.getElementById('registrosHoy').textContent = stats.registros_hoy || 0;
        document.getElementById('registrosSemana').textContent = stats.registros_semana || 0;
        document.getElementById('registrosMes').textContent = stats.registros_mes || 0;
    }

    getNombreTipoComida(tipo) {
        const nombres = {
            'desayuno': 'Desayuno',
            'almuerzo': 'Almuerzo',
            'merienda': 'Merienda',
            'cena': 'Cena',
            'colacion': 'Colación',
            'otro': 'Otro'
        };
        return nombres[tipo] || tipo;
    }

    mostrarAlerta(mensaje, tipo) {
        const alertContainer = document.getElementById('alertContainer') || this.crearAlertContainer();
        
        const alertHTML = `
            <div class="alert alert-${tipo} alert-dismissible fade show" role="alert">
                <i class="fas fa-${tipo === 'success' ? 'check-circle' : tipo === 'warning' ? 'exclamation-triangle' : 'times-circle'} me-2"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        alertContainer.insertAdjacentHTML('beforeend', alertHTML);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            const alert = alertContainer.lastElementChild;
            if (alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 5000);
    }

    crearAlertContainer() {
        const container = document.createElement('div');
        container.id = 'alertContainer';
        container.className = 'position-fixed top-0 end-0 p-3';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        return container;
    }

    mostrarError(mensaje) {
        this.mostrarAlerta(mensaje, 'danger');
    }
}

// Variable global para la instancia
let registroComidasPaciente = null;

// Función para inicializar el registro de comidas
function initRegistroComidas() {
    if (!registroComidasPaciente) {
        registroComidasPaciente = new RegistroComidasPaciente();
    }
    return registroComidasPaciente;
}

// Función para limpiar la instancia cuando se cambia de sección
function cleanupRegistroComidas() {
    if (registroComidasPaciente) {
        registroComidasPaciente = null;
    }
}